<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN">

<book lang="es">
	
<title>Práctica 2ª de Administración de Sistemas Informáticos</title>
	
	<bookinfo>
		<date>10 de Diciembre de 2002</date>
	<authorgroup>
		<author>
			<firstname>Aitor</firstname>
			<surname>Acedo Legarre</surname>
		</author>

		<author>
			<firstname>Cristina</firstname>
			<surname>Puertolas Rebollar</surname>
		</author>
	</authorgroup>
	</bookinfo>

<chapter>

	<title>Corrección del script proporcionado con el enunciado</title>
	
	<para>
	El objetivo de la práctica número 2 de ASI es el de comenzar  con la utilización de la programación shell.
	</para>

	<para>
	La primera parte de la práctica trata de reparar lso fallos existentes en un script proporcionado por el 
profesor para que funcione adecuadamente, el script inicialmente es el siguiente:
	</para>
	
	<para>
	<informalexample>
	<programlisting>
	!#/bin/sh
	#Objetivo: aceptar una lista de nombres de usuario y mirar si están en /etc/passwd

	if [ $# == 0 ]
	then
		echo Se debe introducir al menos un parámetro
	fi

	for nombre in $* do
		grep "^nombre:" /etc/passwd < /dev/null
	if [ $* -eq 0 ]
	then
		echo nombre usuario es válido
	else 
		echo nombre usuario no es válido
	done
	</programlisting>
	</informalexample>
	</para>

	<para>
	Como se puede apreciar a simple vista hay bastantes fallos de sintaxis como por ejemplo en la primera línea,
donde tenemos escrito, !#/bin/sh, el orden de los dos primeros caracteres deberá de ser invertido para que el script
sea reconocido satisfactoriamente, con lo cual la primera línea quedará de la siguiente manera, #!/bin/sh.
	</para>

	<para>
	Ahora vamos a presentar el script tal y como nosotros lo hemos modificado para que funcione de acuerdo a los 
objetivos marcados al inicio, el script arreglado será pues:
	</para>

	<para>
	<informalexample>
	<programlisting>
	#!/bin/sh
	#Objetivo: aceptar una lista de nombres de usuario y mirar si están en /etc/passwd

	# $# esta varible contiene el número de parametros que le hemos pasado al script
	# Comparamos el contenido de la variable con cero para ver si le hemos pasado algún parámetro.
	# Si no le hemos pasado ningún parámetro sacamos un mensaje por la salida estandar.

	if [ $# -eq 0 ]
	then
		echo Se debe introducir al menos un parámetro
	fi

	# En la variable de entorno $* tendremos todos los parámetros introducidos al script
	# Y la variable nombre irá tomando en cada iteracción el valor de cada uno de los parámetros pasados

	for nombre in $*; do 
		grep "^$nombre:" /etc/passwd > /dev/null

		if [ $? -eq 0 ]; then
			echo Usuario $nombre valido
		else
			echo Usuario $nombre NO valido
		fi
	done

	# Dentro del bucle for lo que hacemos será buscar en cada una de las líneas del fichero /etc/passwd
	# si en su comienzo se encuentra cada uno de los parámetros introducidos por el usuario seguido por
	# los dos puntos, y despues comprobamos si el comando tuvo éxito y si lo tuvo significará que el parámetro
	# coincide con un nombre de usuario y si no es que no coincide con nimgún nombre de usuario.

	# La variable de entorno $? nos indicará si el último comando ejecutado tuvo una ejecución correcta, lo que
	# implicará que $? valga 0, o por el contrario que el comando se ejecutó sin éxito $? distinto de 0.

	</programlisting>
	</informalexample>
	</para>

	<para>
	Por la interpretación del script se puede ver que tiene fallos debidos a la eficiencia como por ejemplo
el hecho de que aunque no hayamos introducido ningún parámetro no impide el hecho de que se llegue al código del for, 
hecho que un programa normal no tendría ningún sentido.
	</para>

	<para>
	Dedibo a los errores en el código del script mencionados anteriormente decidimos como suplemento implementar un script
	adicional que tratase de ser un poco más eficiente que el proporcionado por el enunciado de la práctica, y con el fin 
	de adentrarnos un poco más en la programación en shell scripting. El código del script es el siguiente:
	</para>

	<para>
	<informalexample>
	<programlisting>

		#!/bin/sh

		# Objetivo: aceptar una lista de nombres de usuario y mirar si estan en /etc/passwd

		# Deberemos tener permisos de lectura sobre el fichero en cuestión, en este caso, /etc/passwd
		# por lo que deberemos intentar cerciorarnos de ello antes de intentar leer el fichero con 'grep'
		# La opcion -r implica que el archivo existe y se puede leer!!! por lo tanto es la que tendremos que usar.

		# En el primer if tendrán que cumplirse las dos condiciones para que se ejecute el cuerpo del if 
		# sino no deberá ejecutarse por lo que debemos de colocar un and lógico.


		if [ $# -eq 0 -a -r /etc/passwd ]; then
			
			echo No hay argumentos o el archivo no existe o no puede ser leido 	

		else

			for nombre in $*	#para recorrer cada parametro	
			do
				#if [ `grep -w -c -q $nombre /etc/passwd` -ne 0 ]; then
				
				if [ `grep -c -q $nombre /etc/passwd` -ne 0 ]; then
					echo Usuario $nombre encontrado
				else
					echo Usuario $nombre NO encontrado
				fi
			done
		fi
	</programlisting>
	</informalexample>
	</para>
	

</chapter>

<chapter>

	<title>Implementación del script verificaRegistro</title>
	
	<para>
	La segunda parte de la práctica dos tendremos que implementar un script que analice un fichero de registro 
de conexiones a través de ftp (/var/log/ftp.log) y produzca una serie de estadísticas de uso que incluyan:
	</para>
	
	<itemizedlist>
	<listitem>
	<para>Número de accesos por usuario</para>
	</listitem>
	<listitem>
	<para>Número de bytes transferidos</para>
	</listitem>
	<listitem>
	<para>Cantidad de máquinas que han usado el acceso ftp</para>
	</listitem>
	</itemizedlist>

	<para>
	El formato del fichero de registro de conexiones de ftp tendrá el siguiente formato:
	</para>
	
	<itemizedlist>
	<listitem>
	<para>Nombre de la máquina remota</para>
	</listitem>
	<listitem>
	<para>Tamaño del fichero transferido en bytes</para>
	</listitem>
	<listitem>
	<para>Nombre del fichero</para>
	</listitem>
	<listitem>
	<para>Nombre o dirección e-mail (contraseña de ftp anónimo) del usuario conectado</para>
	</listitem>
	</itemizedlist>

	<para>
	Con toda esta información nosotros hemos realizado el siguiente script para cumplir los objetivos propuestos:
	</para>

	<para>
	<informalexample>
	<programlisting>
	#!/bin/sh

	# Indentificamos el shell con el que sera interpretado el script que vamos a escribir

	#
	# Objetivo: tenemos que analizar un fichero log de un servidor ftp y que produzca una serie de estadisticas
	# de uso que incluyan:
	# 	Numero de accesos por usuario
	#	Numero de bytes transferidos
	#	Cantidad de maquinas que han usado el acceso ftp 
	#


	#
	# El script tendra que aceptar parametros estos deberan ser:
	# 	el subdirectorio
	#	USUARIOS
	#	BYTES
	#	MAQUINAS
	#


	#
	# La estructura del fichero de registro de conexiones FTP sera la siguiente: 
	# (Esta es la informacion que contiene el fichero en cada linea)
	# 	nombre de la maquina remota
	#	tamaño del fichero transferido en bytes
	#	nombre del fichero
	#	nombre o direccion e-mail (contraseña del FTP anonimo) del usuario que se conectado


	# Comprobamos que introducimos al menos el parámetro con el subdirectorio y al menos uno de los parámetros
	# USUARIOS, BYTES, MAQUINAS.
	if [ $# -lt 0 ]; then
		echo 'Formato: verificaRegistro ruta_directorio [USUARIOS | MAQUINAS | BYTES]...'
	else
		# Aqui definiremos un fichero temporal para realizar operaciones con los datos del fichero de registro
		param2="/tmp/${1}.dat"
		
		grep /pub/${1} /var/log/ftp.log > $param2
		
		for param in $*; do
			
			case $param in
				USUARIOS) grep /pub/${1} /var/log/ftp.log | cut -d ' ' -f 4 | uniq -c;;
				BYTES)  bytes=`cut -d ' ' -f 2 $param2`
					num2="0"
					for num in $bytes; do
						num2=`expr $num2 + $num`
					done
					echo $num2;;
				MAQUINAS) sort $param2 | uniq -W 1 | wc -l;; 
			esac
		done
		# Borramos el fichero temporal que hemos creado
		rm $param2
	fi
	</programlisting>
	</informalexample>
	</para>
	
</chapter>
</book>
