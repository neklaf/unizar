/*
 * PuntoVenta.java
 *
 * Created on 18 de febrero de 2005, 17:16
 */

/*TODO:
 * Cuando termine de hacer la implementacion normal me podr’a poner a mirar para
 * hacerlo con multiples filas (creo que no a–ade mucha complejidad aunque ya veremos!!)
 */

/*TODO:
 * Tenemos que limpiar el c—digo para que sea claro y empezar a hacer el resto de ventanas!!!
 */

package Interfaz;

//import MantenimientoDB.PuntoDistribucion;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;

/**
 *
 * @author  hadden
 */
public class PuntoVenta extends javax.swing.JFrame {
    
    //Campos declarados por mi
    //private pvModel mod;
    DefaultTableModel m;
    String cols[] = new String [] {"zona", "localizacion", "tfno"};
    Vector vCol;
    
    /** Creates new form PuntoVenta */
    public PuntoVenta() {
        Vector v;
        //Creamos el vector que almacena los nombres de las columnas
        vCol = new Vector();
        //El nombre de cada columna es un elemento del vector
        vCol.addElement(cols[0]); //ÀQue diferencia hay entre add y addElement?
        vCol.addElement(cols[1]);
        vCol.addElement(cols[2]);
            
        initComponents();
        
        m = (DefaultTableModel)jTable1.getModel(); //Aqui tendremos el modelo de nuestra tabla
        
                
        //setupJTable();
                
        //Configuramos parametros de la ventana
        //Tama–o de la ventana
        this.setSize(600,450);
        //La hacemos visible
        //this.setVisible(true);
        //Titulo de la ventana
        setTitle("Punto de Venta");
        //TODO: Tenemos que hacer que la posicion cuando aparezca la ventana sea la que nosotros queramos
    }
    
    // Abre la ventana y pone los datos de los puntos de distribucion que hay en la tabla
    public void visualiza(){
        Vector v;
        
        v = (Vector)new MantenimientoDB.PuntoDistribucion().buscar(-1); //Ahora tenemos un vector de movidas
        
<<<<<<< PuntoVenta.java
        if (v != null){}
            //m.setDataVector(v, vCol);
        else
            out.setText("No hay puntos de Venta en la BD");
        
=======
        db2table(v);
>>>>>>> 1.4
        this.setVisible(true);
    }
    
    
    // Pensar si esto tendr’a que estar aqui o en otro sitio?? como por ejemplo en la clase en la que tenemos los campos
    // podriamos tener un metodo que se denomine CentralPuntoDistribucion.toVector()
    private void db2table(Vector v){
              
        if (v != null){
            
            String clase;
            
            /*Definimos tantas variables como tipos pueda tener la fila que vamos a recibir*/
            Central.CentralPuntoDistribucion crow;
            PuntoDeVenta.PVPuntoDistribucion pvrow;
            Vector rows = new Vector();
                       
            int i = 0;
            
            //Recorremos todas filas que nos haya proporcionado la base de datos
            while (i < v.size()){
               
                clase = v.elementAt(i).getClass().getName(); //Recibimos el nombre de la clase de la fila
                
                if(clase.endsWith("Central.CentralPuntoDistribucion")){
                    //System.out.println("Central.CentralPuntoDistribucion");
                    crow = (Central.CentralPuntoDistribucion)v.elementAt(i);
                    Vector vfields = new Vector();
                    vfields.addElement(new Integer(crow.getZona()));
                    vfields.addElement(crow.getLocalizacion());
                    vfields.addElement(crow.getTfno());
                    
                    rows.addElement(vfields);
                    /*System.out.println("Zona: " + crow.getZona()); // Devuelve un entero
                    System.out.println("Localizacion: " + crow.getLocalizacion());
                    System.out.println("Tfno: " + crow.getTfno());*/
                }else if(clase.endsWith("PuntoDeVenta.PVPuntoDistribucion")){
                    //System.out.println("PuntoDeVenta.PVPuntoDistribucion");
                    pvrow = (PuntoDeVenta.PVPuntoDistribucion)v.elementAt(i);
                    
                    Vector vfields = new Vector();
                    vfields.addElement(new Integer(pvrow.getZona()));
                    vfields.addElement(pvrow.getLocalizacion());
                    vfields.addElement(pvrow.getTfno());
                    
                    rows.addElement(vfields);
                    /*System.out.println("Zona: " + pvrow.getZona()); // Devuelve un entero
                    System.out.println("Localizacion: " + pvrow.getLocalizacion());
                    System.out.println("Tfno: " + pvrow.getTfno());*/
                }
                i++;
              
            }
            m.setDataVector(rows, vCol); //Pasamos los resultados de la base de datos a la tabla
        }else
            out.setText("No hay puntos de Venta en la BD");
    }
    
    private void setupJTable(){
        //Modificamos el modelo por defecto
        /*mod = new pvModel();
        jTable1 = new JTable(mod);*/
        
           
              
        //Podemos seleccionar una unica celda!!
        /*jTable1.setColumnSelectionAllowed(true);
        jTable1.setRowSelectionAllowed(true);*/
        
        /*Podemos configurar la tabla para que podamos seleccionar las celdas de diferente manera*/
        /*Cuando seleccionamos una celda que se seleccione toda la columna*/
        //jTable1.setColumnSelectionAllowed(true);
        //jTable1.setRowSelectionAllowed(false);
        
        /*Cuando seleccionamos una celda que se seleccione toda la fila (creo la mas apropiada)*/
        /*jTable1.setColumnSelectionAllowed(false);
        jTable1.setRowSelectionAllowed(true);*/
        
        /*Cuando seleccionamos una celda que solamente se seleccione esa celda*/
        //jTable1.setColumnSelectionAllowed(true);
        //jTable1.setRowSelectionAllowed(true);
            /*Dentro de esta manera de seleccionar tenemos varios modos posibles:
             SINGLE_SELECTION
             SINGLE_INTERVAL_SELECTION
             MULTIPLE_INTERVAL_SELECTION*/
        
        /*Para todos los metodos que Nacho ha implementado solamente es necesario seleccionar una fila,
         excepto para el metodo modificar en el que tenemos mas parametros*/
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        Cancelar = new javax.swing.JButton();
        Insertar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        Buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Limpiar = new javax.swing.JButton();
        nzona = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        out = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        getContentPane().add(Cancelar);
        Cancelar.setBounds(421, 310, 90, 25);

        Insertar.setText("Insertar");
        Insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertarActionPerformed(evt);
            }
        });

        getContentPane().add(Insertar);
        Insertar.setBounds(40, 30, 80, 25);

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        getContentPane().add(Eliminar);
        Eliminar.setBounds(40, 100, 80, 29);

        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        getContentPane().add(Modificar);
        Modificar.setBounds(30, 170, 100, 25);

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        getContentPane().add(Buscar);
        Buscar.setBounds(40, 280, 70, 25);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "zona", "localizacion", "tfno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(180, 30, 340, 260);

        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        getContentPane().add(Limpiar);
        Limpiar.setBounds(230, 310, 80, 25);

        getContentPane().add(nzona);
        nzona.setBounds(40, 230, 90, 21);

        jLabel1.setText("Nueva Zona:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 210, 90, 20);

        jLabel2.setText("Estado:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 360, 60, 15);

        getContentPane().add(out);
        out.setBounds(100, 360, 410, 21);

        pack();
    }//GEN-END:initComponents

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        // TESTED
        if(!jTable1.getColumnSelectionAllowed() && jTable1.getRowSelectionAllowed()){
            int row = jTable1.getSelectedRow();
            System.out.println("Fila: " + jTable1.getSelectedRow());
            
            if(row >= 0){
                Integer z; String l,t;
                try{
                    z = (Integer)jTable1.getValueAt(row, 0);
                    l = ((String)jTable1.getValueAt(row, 1)).trim();
                    t = ((String)jTable1.getValueAt(row, 2)).trim();
                    try{
                        Integer z2 = new Integer(nzona.getText());
                        System.out.println("Nueva Zona: " + z2.intValue());
                        if((new MantenimientoDB.PuntoDistribucion().modificar(z.intValue(), z2.intValue(), l, t) == 1))
                            out.setText("Modificado con exito");
                    else
                        out.setText("Error al modificar");
                    }catch(NumberFormatException n){
                        out.setText("Error al introducir la nueva zona");
                    }
                }catch(NullPointerException n){
                    out.setText("Error al introducir los argumentos");
                }
                //Tenemos que coger tambien el parametro que le pasamos como nueva clave
                
                
            }
        }
    }//GEN-LAST:event_ModificarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        //TESTED
        if(!jTable1.getColumnSelectionAllowed() && jTable1.getRowSelectionAllowed()){
            int row = jTable1.getSelectedRow();
            System.out.println("Fila: " + jTable1.getSelectedRow());
            
            if(row >= 0){
                Integer z;
                try{
                    z = (Integer)jTable1.getValueAt(row, 0);
                    
                    if((new MantenimientoDB.PuntoDistribucion().eliminar(z.intValue())) == 1)
                        out.setText("Eliminado con exito");
                    else
                        out.setText("Error al eliminar");
                }catch(NullPointerException n){
                    out.setText("Falta introducir la zona");
                }
            }else
                System.out.println("Fila no valida: "+ row);
        }
   
    }//GEN-LAST:event_EliminarActionPerformed

    private void InsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertarActionPerformed
        //TODO TEST
        //Tenemos que insertar el punto de distribucion que se encuentre seleccionado en la tabla!!
        /*if (jTable1.getCellSelectionEnabled()) { //Comprobamos que la seleccion de celdas esta activa (se supone que lo estara)
            
        }*/
        /*Tenemos que tener en cuenta que tipo de seleccion ha sido habilitada para esta tabla!!!*/
        if (jTable1.getColumnSelectionAllowed() && !jTable1.getRowSelectionAllowed()){
            //Recibimos los indices de las columnas seleccionadas
            //int []vColInd = jTable1.getSelectedColumns();
            out.setText("Seleccion por columnas");
        }else if(!jTable1.getColumnSelectionAllowed() && jTable1.getRowSelectionAllowed()){
            //Recibimos los indices de las filas seleccionadas
            //int []vRowInd = jTable1.getSelectedRows();
            //Si solamente queremos tener en cuenta la primera fila seleccionada simplemente tendremos que llamar a:
            // int row = jTable1.getSelectedRow();
            /**Ya tenemos la fila que queremos utilizar para pasar los parametros!!!
             Simplemente tendremos que comprobar que es != -1 y podremos llamar a la funcion inserta, con las diferentes columnas
             */
            /*out.setText("Seleccion por filas");
            out.updateUI();*/
            /**/
            System.out.println("Seleccion por filas");
            /*Por ahora solamente soportamos la insercion de 1 fila*/
            int row = jTable1.getSelectedRow();
            System.out.println("Fila: " + jTable1.getSelectedRow());
            
            if(row >= 0){
                Integer z; String l,t;
                try{ //Este try es por si alguno de los parametros no es escrito
                    z = (Integer)jTable1.getValueAt(row, 0);
                    l = ((String)jTable1.getValueAt(row, 1)).trim();
                    t = ((String)jTable1.getValueAt(row, 2)).trim();
                    if(new MantenimientoDB.PuntoDistribucion().insertar(z.intValue(), l, t) == 1)
                        out.setText("Insercion con exito");
                    else
                        out.setText("Insercion erronea");
                    
                }catch(NullPointerException n){
                    out.setText("Error de introduccion de datos");
                }
                                        
            }else
                System.out.println("Fila no valida fila: " + row);
            
        }else if(jTable1.getCellSelectionEnabled()){
            //Tenemos habilitado el modo de seleccion de celdas individuales
            //Aqui tenemos varios casos
            //Modo SINGLE_SELECTION
            //jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            //Modo SINGLE_INTERVAL_SELECTION
            
            //Modo MULTIPLE_INTERVAL_SELECTION
            out.setText("Seleccion por celdas");
        }
    }//GEN-LAST:event_InsertarActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        // TESTED!!
        nzona.setText("");//Limpiamos el contenido del nuevo JTextField
        Vector v = new Vector();
        v.addElement(null); //Cada elemento del vector que le pasamos como dato a setDataVector es una fila!!!
        
        /*v.addElement(null);
        v.addElement(null);*/
        m.setDataVector(v, vCol);
        out.setText("Tabla limpiada!");
    }//GEN-LAST:event_LimpiarActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        //TODO TEST
        
        if (jTable1.getCellSelectionEnabled()) {
            System.out.println("Seleccion por celdas");
            
       }else if(!jTable1.getColumnSelectionAllowed() && jTable1.getRowSelectionAllowed()){
            Vector v;
            //Devuelve un objecto y forzamos a que sea una clase Integer
            //Tenemos que controlar que sea una celda de la primera columna!!!
            int col, row;
            
            //System.out.println("Seleccion por filas");
            
            //col = jTable1.getSelectedColumn();
            row = jTable1.getSelectedRow(); //Recibimos la fila que estamos seleccionando
            
            //System.out.println("Columna: " + col);
            
            if (row >= 0){ //La fila tendra que ser mayor que -1 para que sea correcta
                //Integer zona = (Integer)jTable1.getValueAt(jTable1.getSelectedRow(), col);
                try{
                    Integer zona = (Integer)jTable1.getValueAt(row, 0);
                
                    System.out.println("Zona a buscar: " + zona.intValue());
                
                    v = (Vector)new MantenimientoDB.PuntoDistribucion().buscar(zona.intValue());
                    
                    db2table(v); //Esto es necesario para poder presentar los valores de la fila en la tabla
                    
                }catch(NullPointerException n){
                    out.setText("Error en la introduccion de los datos");
                }
            }else{
                System.err.println("No estamos seleccionando la columna adecuada");
            }
        }
    }//GEN-LAST:event_BuscarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        // TESTED
        setVisible(false);
    }//GEN-LAST:event_CancelarActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //TODO TEST
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        new PuntoVenta().show();
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Insertar;
    private javax.swing.JButton Limpiar;
    private javax.swing.JButton Modificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nzona;
    private javax.swing.JTextField out;
    // End of variables declaration//GEN-END:variables
    
    
    //Parte importante de la tabla que hace mas sencillo el manejo de la misma
    /*class pvModel extends AbstractTableModel{
        private int cols, rows;
        private String [] nbs = {"zona", "localizacion", "tfno"};
        private Vector vRows;
        private ResultSetMetaData rsmd;
        
        pvModel(){
            //constructor de la clase pvModel
            vRows = new Vector();
            cols = 3; rows = 0;
            
        }
        
        //Este es el metodo que tendre que llamar para modificar el modelo y la tabla!!
        //Esto es lo que he acordado que Nacho me pasar’a!!
        public void setVector(Vector v){
            vRows = v;
            fireTableChanged(null); //actualizar la tabla en la que se representan los datos!!
        }
        
        public String getColumnName(int col){
            return nbs[col];
        }
        
        public int getColumnCount() {
            return cols;
        }        
        
        public int getRowCount() {
            return vRows.size();
        }
        
        public Object getValueAt(int row, int col) {
            Vector vOneRow = (Vector)vRows.elementAt(row);
            return vOneRow.elementAt(col);
        }
        
        //La implementacion se vera reducida al tipo del que sean las columnas!!!
        public Class getColumnClass(int col){
            String className = new String();
            try{
                className = rsmd.getColumnClassName(col);
            }catch(SQLException e){
                //...
            }
            if(className.endsWith("String"))
                return String.class;
            else if(className.endsWith("Integer"))
                return Integer.class;
            else return Object.class;
        }
    }*/
    
}
